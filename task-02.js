//https://www.codewars.com/kata/convert-a-string-to-an-array/train/javascript

function stringToArray(string) {
  return string.split(" ");
}

/*
Ця функція отримує рядок 'string' та повертає масив, який містить окремі слова цього рядка.

Для досягнення цієї мети, функція використовує метод 'split()', який розділяє рядок на "частинки"
згідно з переданим роздільником. В нашому випадку роздільником є пробіл - " ". Тому, метод 'split()'
розділить рядок на частинки, де кожна частинка буде відповідати окремому слову у рядку 'string'.
*/


//https://www.codewars.com/kata/dna-to-rna-conversion/train/javascript

function DNAtoRNA(dna) {
  return dna.replaceAll("T", "U");
}

/*
У даному випадку використовується метод replaceAll() для заміни всіх літер T на літеру U. 
Таким Чином метод перетворює послідовність ДНК (з латинськими літерами A, C, G, T) на 
послідовність РНК (з латинськими літерами A, C, G, U) шляхом заміни літери T на літеру U.
*/


//https://www.codewars.com/kata/577a98a6ae28071780000989/train/javascript

var min = function (list) {
  return Math.min(...list);
};

var max = function (list) {
  return Math.max(...list);
};

/*
Обидва методи - 'min' та 'max' - дозволяють знайти найменше та найбільше значення в масиві 'list'.

У методі min використовується метод 'Math.min()' для знаходження мінімального значення в масиві 'list'. 
Для передачі значень масиву 'list' до методу 'Math.min()', функція використовує оператор 'spread' (...), 
який розгортає елементи масиву в окремі аргументи.

Метод max використовує метод 'Math.max()' для знаходження максимального значення в масиві 'list'. 
Як і у випадку з 'min', метод 'max' також використовує оператор 'spread' для передачі значень 
масиву 'list' до методу 'Math.max()'.

Обидва методи повертають знайдене найменше або найбільше значення у масиві 'list'.
*/


//https://www.codewars.com/kata/544a54fd18b8e06d240005c0/train/javascript

function min(arr, toReturn) {
  let minValue = Math.min(...arr);
  return toReturn === "value" ? minValue : arr.indexOf(minValue);
}

/*  Alternative solution withot variable: 
function min(arr, toReturn) {
  return toReturn === "value" ? Math.min(...arr) : arr.indexOf(Math.min(...arr));
}

*/

/*
Цей метод приймає масив arr та рядок toReturn, який вказує, що повернути: мінімальне значення 
з масиву чи його індекс.

На першому кроці використовується метод Math.min() для знаходження мінімального значення 
в масиві arr. 

Для передачі значень масиву arr до методу Math.min(), ми використовуємо оператор
spread (...), який розгортає елементи масиву в окремі аргументи.

Після того, як мінімальне значення було знайдено, функція перевіряє значення параметру toReturn.
Якщо значення параметру дорівнює "value" (тобто ми хочемо повернути саме мінімальне значення), 
функція поверне minValue (тобто саме мінімальне значення з масиву arr). Якщо ж значення параметру 
toReturn дорівнює "index" (тобто ми хочемо повернути індекс мінімального значення), функція використовує 
метод indexOf() для знаходження індексу мінімального значення у масиві arr, та повертає його.
*/


// https://www.codewars.com/kata/a-wolf-in-sheeps-clothing/train/javascript

function warnTheSheep(queue) {
  const index = queue.length - 1 - queue.indexOf("wolf");
  return index
    ? `Oi! Sheep number ${index}! You are about to be eaten by a wolf!`
    : "Pls go away and stop eating my sheep";
}

/*
Для досягнення результату використовується метод 'indexOf' масиву, який шукає індекс в якому 
елемент масиву має значення 'wolf'. Знайдений індекс потім використовується, щоб визначити, 
яка вівця стоїть перед вовком. Для цього використовується формула: queue.length - 1 - index. 
Ми віднімаємо 1 з довжини масиву, тому що індекси масиву починаються з 0, а довжина - з 1. 
Потім ми віднімаємо індекс вовка зі знайденого значення indexOf. Це дає нам індекс вівці, 
яка стоїть перед вовком.

Якщо індекс знайдено, метод повертає рядок, який містить індекс вівці і повідомлення, що вовк 
збирається з'їсти цю вівцю. Якщо вовк не знайдений у черзі (тобто indexOf() повертає -1), 
функція поверне рядок "Pls go away and stop eating my sheep".
*/


// https://www.codewars.com/kata/beginner-lost-without-a-map

function maps(x) {
  return x.map((x) => x * 2);
}

/*
У даному випадку, стрілочна функція приймає кожний елемент масиву x як аргумент та повертає 
цей елемент, помножений на 2. Метод 'map' повертає новий масив, у якому кожен елемент масиву x 
множиться на 2. 
*/


// https://www.codewars.com/kata/find-the-first-non-consecutive-number/train/javascript

function firstNonConsecutive(arr) {
  let result = arr.find((value, index) => index > 0 && value !== arr[index - 1] + 1);
  return Number.isInteger(result) ? result : null;
}

/*
Цей метод приймає масив 'arr' і повертає перший неконсективний елемент у масиві.

Використовується метод 'find' масиву для пошуку першого елемента, який не 
задовольняє умову, передану в стрілочній функції. Умова перевіряє, чи індекс 
поточного елементу більший за 0, а також чи значення поточного елемента не дорівнює 
попередньому елементу масиву плюс один. Якщо умова виконується, 'find' повертає поточний елемент.

Якщо 'find' не знайшов неконсективний елемент, то результатом буде 'undefined'. Метод 
перевіряє, чи результат 'find' є цілим числом за допомогою методу Number.isInteger. Якщо так, 
то повертається результат, інакше - 'null'.

Отже, якщо масив не містить неконсективних елементів, метод поверне 'null'. Якщо масив 
містить неконсективні елементи, то поверне перший такий елемент.
*/
